#include <DabbleESP32.h>
#include <ESP32Servo.h>

// Define PWM-capable GPIO pins for servo control
#define PIN_1 13  // âœ… PWM OK
#define PIN_2 4   //  âœ… PWM OK
#define PIN_3 14  // âœ… PWM OK
#define PIN_4 27  // âœ… PWM OK
#define PIN_5 26  // âœ… PWM OK
#define PIN_6 25  // âœ… PWM OK
#define PIN_7 33  // âœ… PWM OK
#define PIN_8 32  // âœ… PWM OK
#define PIN_9 19  // âœ… PWM OK (Replacing GPIO 35)
#define PIN_10 22 // âœ… PWM OK (Replacing GPIO 34)
#define PIN_11 5  // âœ… PWM OK
#define PIN_12 18 // âœ… PWM OK

// Servo definitions
Servo leftFrontA, leftFrontB;
Servo leftMiddleA, leftMiddleB;
Servo leftBackA, leftBackB;
Servo rightFrontA, rightFrontB;
Servo rightMiddleA, rightMiddleB;
Servo rightBackA, rightBackB;

// Things to know
// Servo label A - means left to right motion
// Servo label B - means up and down motion

// THIS IS ALL FOR SERVOS A
// NOT the direction of the left front leg motion it goes backward

// NOT the direction of middle left for right front leg motion

unsigned long lastInputTime = 0;
unsigned long lastIdleActionTime = 0;
const unsigned long idleThreshold = 60000; // 60s



void setup() {
    Serial.begin(115200);

    // Attach servos to their respective pins
    rightFrontA.attach(PIN_5); //done
    rightFrontB.attach(PIN_6); // done
    rightMiddleA.attach(PIN_3); // done
    rightMiddleB.attach(PIN_4); // done
    rightBackA.attach(PIN_1); // done
    rightBackB.attach(PIN_2); // done
    leftFrontA.attach(PIN_11); // done
    leftFrontB.attach(PIN_12); // done
    leftMiddleA.attach(PIN_9); // done
    leftMiddleB.attach(PIN_10); // done
    leftBackA.attach(PIN_7); // done
    leftBackB.attach(PIN_8); // done

    Dabble.begin("ASME_ArachnoBot");  // Initialize Dabble Bluetooth

    // Initialize servos to 90Â° (neutral position)

    // left side B servos
    leftFrontB.write(90);
    leftMiddleB.write(90);
    leftBackB.write(90);

    // right side B servos
    rightFrontB.write(90);
    rightMiddleB.write(90);
    rightBackB.write(90);


    // left side A servos
    leftFrontA.write(60); 
    leftMiddleA.write(90);
    leftBackA.write(120);


    // right side A servos
    rightFrontA.write(120); 
    rightMiddleA.write(90);
    rightBackA.write(60);
    
delay(1000);
}


void loop() {
    Dabble.processInput();  // Process Dabble app inputs
if (GamePad.isUpPressed() || GamePad.isDownPressed() || GamePad.isLeftPressed() || GamePad.isRightPressed() ||
        GamePad.isStartPressed() || GamePad.isSelectPressed() || GamePad.isCirclePressed() || GamePad.isCrossPressed() ||
        GamePad.isTrianglePressed() || GamePad.isSquarePressed()) {

        lastInputTime = millis(); // reset user activity timer
        lastIdleActionTime = millis(); // reset idle animation cycle
    }

    // If we've been idle for 60s and it's time to run the next idle animation
    if ((millis() - lastInputTime >= idleThreshold) && (millis() - lastIdleActionTime >= idleThreshold)) {
        // ðŸ•’ Do the tap dance again
        rightFrontB.write(25); delay(200);
        rightFrontB.write(90); delay(200);
        leftFrontB.write(155); delay(200);
        leftFrontB.write(90); delay(200);
        rightFrontB.write(25); delay(200);
        rightFrontB.write(90); delay(200);
        leftFrontB.write(155); delay(200);
        leftFrontB.write(90); delay(200);

        lastIdleActionTime = millis(); // reset animation cycle timestamp
    }



    if (GamePad.isUpPressed()) {
        // start off on the right foot: lift
        rightFrontB.write(25);
        leftMiddleB.write(25);
        rightBackB.write(155);
        printf("right foot lift motion");
        delay(300);

        // move the three legs: forward
        rightFrontA.write(150);
        leftMiddleA.write(60);
        rightBackA.write(90);
        printf("right leg move the leg");
        delay(300);

        // put the legs down
        rightFrontB.write(90);
        leftMiddleB.write(90);
        rightBackB.write(90);
        printf("put the legs down");
        delay(300);
        
// lift the other legs so not dragging butt: lift
        leftFrontB.write(155);
        rightMiddleB.write(155);
        leftBackB.write(25);
        delay(300);

        // drag the legs back and lift the other legs: walk motion to initial state
        rightFrontA.write(120);
        leftMiddleA.write(90);
        rightBackA.write(60);
        printf("drag the leg back and lift the other legs");
        delay(300);

        // move left triangle legs: forward
        leftFrontA.write(30);
        rightMiddleA.write(120);
        leftBackA.write(90);
        printf("left leg move the leg");
        delay(300);

        // put the legs down: down
        leftFrontB.write(90);
        rightMiddleB.write(90);
        leftBackB.write(90);
        printf("left leg put the leg down");
        delay(300);

        // lift the other legs so they don't slide
        rightFrontB.write(25);
        leftMiddleB.write(25);
        rightBackB.write(155);
        delay(300);
        
        // drag the legs back and lift other legs: walk motion to start initial state
        leftFrontA.write(60);
        rightMiddleA.write(90);
        leftBackA.write(120);
        printf("left leg drag the leg back");
        delay(300);
        
        // back to initial state
        rightFrontB.write(90);
        leftMiddleB.write(90);
        rightBackB.write(90);
        delay(300); 
    }

    // left turn
    if (GamePad.isLeftPressed()) {
        // lift first triangle
        rightFrontB.write(25);
        leftMiddleB.write(25);
        rightBackB.write(155);
        delay(300);

        // turn: left back, right forward
        rightFrontA.write(150);
        leftMiddleA.write(120);
        rightBackA.write(90);
        delay(300);

        // put down
        rightFrontB.write(90);
        leftMiddleB.write(90);
        rightBackB.write(90);
        delay(300);

        // lift second triangle
        leftFrontB.write(155);
        rightMiddleB.write(155);
        leftBackB.write(25);
        delay(300);

        // turn
        leftFrontA.write(90);
        rightMiddleA.write(120);
        leftBackA.write(120);
        delay(300);

        // put down
        leftFrontB.write(90);
        rightMiddleB.write(90);
        leftBackB.write(90);
        delay(300);

        // finalize position to calibrated neutral
        leftFrontA.write(60);
        rightMiddleA.write(90);
        leftBackA.write(120);
        rightFrontA.write(120);
        leftMiddleA.write(90);
        rightBackA.write(60);
        delay(300);
    }

    // left turn
    if (GamePad.isRightPressed()) {
        // lift first triangle
        rightFrontB.write(25);
        leftMiddleB.write(25);
        rightBackB.write(155);
        delay(300);

        // turn: left back, right forward
        rightFrontA.write(90);
        leftMiddleA.write(60);
        rightBackA.write(30);
        delay(300);

        // put down
        rightFrontB.write(90);
        leftMiddleB.write(90);
        rightBackB.write(90);
        delay(300);

        // lift second triangle
        leftFrontB.write(155);
        rightMiddleB.write(155);
        leftBackB.write(25);
        delay(300);

        // turn
        leftFrontA.write(30);
        rightMiddleA.write(60);
        leftBackA.write(60);
        delay(300);

        // put down
        leftFrontB.write(90);
        rightMiddleB.write(90);
        leftBackB.write(90);
        delay(300);

        // finalize position to calibrated neutral
        leftFrontA.write(60);
        rightMiddleA.write(90);
        leftBackA.write(120);
        rightFrontA.write(120);
        leftMiddleA.write(90);
        rightBackA.write(60);
        delay(300);
    }






    if (GamePad.isDownPressed()) {
        // start off on the right foot lift
        rightFrontB.write(25);
        leftMiddleB.write(25);
        rightBackB.write(155);
        printf("right foot lift motion");
        delay(300);

        // move the three legs
        rightFrontA.write(75);     //changed from 90 to 75 to reach back not as far to stabilize
        leftMiddleA.write(120);
        rightBackA.write(30);            //changed to 15 from 30 to reach back further(OLD)
        printf("right leg move the leg");
        delay(300);

        // put the legs down
        rightFrontB.write(90);
        leftMiddleB.write(90);
        rightBackB.write(90);
        printf("put the legs down");
        delay(300);
        
// lift the other legs so they donâ€™t slide
        leftFrontB.write(155);
        rightMiddleB.write(155);
        leftBackB.write(25);
        delay(300);

        // drag the legs back and lift the other legs
        rightFrontA.write(105);              //changed from 120 to 105 to drag back not as far
        leftMiddleA.write(90);
        rightBackA.write(60);                 //changed from 60 to 45 to stay further back to stabilize(OLD)
        printf("drag the leg back and lift the other legs");
        delay(300);

        // move left triangle legs
        leftFrontA.write(90);                     //changed from 90 to 75 to reach back not as far
        rightMiddleA.write(60);
        leftBackA.write(150);                  //changed from 150 to 165 to reach back further(OLD)
        printf("left leg move the leg");
        delay(300);

        // put the legs down
        leftFrontB.write(90);
        rightMiddleB.write(90);
        leftBackB.write(90);
        printf("left leg put the leg down");
        delay(300);

        // lift the other legs so they don't slide
        rightFrontB.write(25);
        leftMiddleB.write(25);
        rightBackB.write(155);
        delay(300);
        
        // drag the legs back and lift other legs
        leftFrontA.write(75);                //changed from 60 to 75 to drag back not as far to stabilize
        rightMiddleA.write(90);
        leftBackA.write(120);  //changed from 120 to 135 so that it is better stabilized before other legs are put down(OLD)
        printf("left leg drag the leg back");
        delay(300);
        
        // back to initial state
        rightFrontB.write(90);
        leftMiddleB.write(90);
        rightBackB.write(90);

                  //KEEP BELOW INITIALIZATIONS OR SPIDEY DOESNâ€™T RESET
        
        rightFrontA.write(120); 
        leftFrontA.write(60); 
        delay(300); 
    }

if (GamePad.isStartPressed()) {
// go back to initialization state
    leftFrontB.write(90);
    leftMiddleB.write(90);
    leftBackB.write(90);
delay(300);
    // right side B servos
    rightFrontB.write(90);
    rightMiddleB.write(90);
    rightBackB.write(90);
delay(300);

    // left side A servos
    leftFrontA.write(60); 
    leftMiddleA.write(90);
    leftBackA.write(120);
delay(300);

    // right side A servos
    rightFrontA.write(120); 
    rightMiddleA.write(90);
    rightBackA.write(60);
   delay(300);
}

// NOTES: try not to run more than 4 Servos at once and use delays to ensure that it all doesn't run all at once

if (GamePad.isSelectPressed()) {
    int neutralLeftB = 90;
    int neutralRightB = 90;
    int liftLeftB = 25;
    int liftRightB = 155;

    // ðŸ’ƒ Step 1: Bounce all legs
    for (int i = 0; i < 3; i++) {
        leftFrontB.write(155);
        leftMiddleB.write(liftLeftB);
        leftBackB.write(liftLeftB);
        rightFrontB.write(25);
        rightMiddleB.write(liftRightB);
        rightBackB.write(liftRightB);
        delay(300);

        leftFrontB.write(neutralLeftB);
        leftMiddleB.write(neutralLeftB);
        leftBackB.write(neutralLeftB);
        rightFrontB.write(neutralRightB);
        rightMiddleB.write(neutralRightB);
        rightBackB.write(neutralRightB);
        delay(300);
    }

    // ðŸ’ƒ Step 2: Sway side to side
    for (int i = 0; i < 2; i++) {
        leftFrontA.write(30);
        leftMiddleA.write(60);
        leftBackA.write(90);
        rightFrontA.write(150);
        rightMiddleA.write(120);
        rightBackA.write(90);
        delay(300);

        leftFrontA.write(90);
        leftMiddleA.write(120);
        leftBackA.write(150);
        rightFrontA.write(90);
        rightMiddleA.write(60);
        rightBackA.write(30);
        delay(300);
    }

    // ðŸ’ƒ Step 3: Alternate triangle leg lifts
    for (int i = 0; i < 2; i++) {
        // Lift one triangle
        leftFrontB.write(155);
        rightMiddleB.write(liftRightB);
        leftBackB.write(liftLeftB);
        delay(300);
        leftFrontB.write(neutralLeftB);
        rightMiddleB.write(neutralRightB);
        leftBackB.write(neutralLeftB);
        delay(300);

        // Lift the other triangle
        rightFrontB.write(25);
        leftMiddleB.write(liftLeftB);
        rightBackB.write(liftRightB);
        delay(300);
        rightFrontB.write(neutralRightB);
        leftMiddleB.write(neutralLeftB);
        rightBackB.write(neutralRightB);
        delay(300);
    }

    // ðŸ’ƒ Step 4: Final pose
    leftFrontA.write(30);
    leftBackA.write(150);
    rightFrontA.write(150);
    rightBackA.write(30);
    delay(300);

    leftFrontB.write(155);
    rightBackB.write(liftRightB);
    delay(300);

    // Reset to neutral
    leftFrontA.write(60);
    leftMiddleA.write(90);
    leftBackA.write(120);
    rightFrontA.write(120);
    rightMiddleA.write(90);
    rightBackA.write(60);
    delay(300);

    leftFrontB.write(90);
    leftMiddleB.write(90);
    leftBackB.write(90);
    rightFrontB.write(90);
    rightMiddleB.write(90);
    rightBackB.write(90);
}

if (GamePad.isCrossPressed()) { // this should be our bouncy lil guy
        
    int neutralLeftB = 90;
    int neutralRightB = 90;
    int liftLeftB = 25;
    int liftRightB = 155;


leftFrontB.write(155);      // this should raise all servos high
        leftMiddleB.write(25);
        leftBackB.write(25);
        rightFrontB.write(25);
        rightMiddleB.write(155);
        rightBackB.write(155);
        leftFrontB.write(155);
        delay(300);

        leftFrontB.write(25);     // this should low all servos low
        leftMiddleB.write(155);
        leftBackB.write(155);
        rightFrontB.write(155);
        rightMiddleB.write(25);
        rightBackB.write(25);
        delay(300);


    leftFrontB.write(90); // this will reset te servos
    leftMiddleB.write(90);
    leftBackB.write(90);
    rightFrontB.write(90);
    rightMiddleB.write(90);
    rightBackB.write(90);
    delay(300);

}




if (GamePad.isTrianglePressed()) {
    // Step 1: Lower the spider (crouch)
    leftFrontB.write(60);
    leftMiddleB.write(120);
    leftBackB.write(120);
    rightFrontB.write(120);
    rightMiddleB.write(60);
    rightBackB.write(60);
    delay(300);

    // Step 2: Pounce forward with a quick A servo shift
    leftFrontA.write(30);
    leftMiddleA.write(60);
    leftBackA.write(90);
    rightFrontA.write(150);
    rightMiddleA.write(120);
    rightBackA.write(90);
    delay(300);

// Step 4: SHAKE ASS FOR A REAL ONE MOTHAFUCKAS
for(int i = 0; i < 2; i++) {  
  leftFrontA.write(90);
    leftMiddleA.write(120);
    leftBackA.write(150);
    rightFrontA.write(90);
    rightMiddleA.write(60);
    rightBackA.write(30);
    delay(350);

 leftFrontA.write(30);
    leftMiddleA.write(60);
    leftBackA.write(90);
    rightFrontA.write(150);
    rightMiddleA.write(120);
    rightBackA.write(90);
    delay(350);
}


// Step 4: Return to neutral stance
    leftFrontA.write(60);
    leftMiddleA.write(90);
    leftBackA.write(120);
    rightFrontA.write(120);
    rightMiddleA.write(90);
    rightBackA.write(60);
    delay(300);

    // Step 3: Raise the spider back up (reset B servos)
    leftFrontB.write(90);
    leftMiddleB.write(90);
    leftBackB.write(90);
    rightFrontB.write(90);
    rightMiddleB.write(90);
    rightBackB.write(90);
    delay(300);

}


if (GamePad.isCirclePressed()) {
    int step = 2;
    int stepDelay = 20; // ~30 steps Ã— 10ms = 300ms

    // --- Phase 1: Lift middle-left, front-left, front-right ---
    for (int i = 0; i <= 45; i += step) {
        leftMiddleB.write(90 - i);   // 90 -> 45
        leftFrontB.write(90 + i);               // 90 -> 135
        rightFrontB.write(90 - i);  // 90 -> 45
        delay(stepDelay);
    }

    // --- Phase 2: Drop back-left, back-right, middle-right ---
    for (int i = 0; i <= 45; i += step) {
        leftBackB.write(90 + i);                // 90 -> 135
        rightBackB.write(90 - i);   // 90 -> 45
        rightMiddleB.write(90 - i); // 90 -> 45
        delay(stepDelay);
    }

    // --- Phase 3: Lift back-left, drop front-right ---
    for (int i = 0; i <= 90; i += step) {
        leftBackB.write(135 - i);          // 135 -> 45
        rightFrontB.write(45 + i);         // 45 -> 135
        delay(stepDelay);
    }

    // --- Phase 4: Lift back-right, drop front-left ---
    for (int i = 0; i <= 90; i += step) {
        rightBackB.write(45 + i);          // 45 -> 135
        leftFrontB.write(135 - i);         // 135 -> 45
        delay(stepDelay);
    }

    // --- Phase 5: Lift middle-right, drop middle-left ---
    for (int i = 0; i <= 90; i += step) {
        rightMiddleB.write(45 + i);        // 60 -> 120
        leftMiddleB.write(45 + i);        // 60 -> 120
        delay(stepDelay);
    }

    // --- Phase 6: Lift front-right, drop back-left ---
    for (int i = 0; i <= 90; i += step) {
        rightFrontB.write(135 - i);        // 120 -> 60
        leftBackB.write(45 + i);           // 60 -> 120
        delay(stepDelay);
    }

    // --- Phase 7: Lift front-left, drop back-right ---
    for (int i = 0; i <= 90; i += step) {
        leftFrontB.write(45 + i);          // 60 -> 120
        rightBackB.write(135 - i);         // 120 -> 60
        delay(stepDelay);
    }

    // --- Phase 8: Lift middle-right, drop middle-left ---
    for (int i = 0; i <= 90; i += step) {
        rightMiddleB.write(135 - i);       // 120 -> 60
        leftMiddleB.write(135 - i);         // 120 -> 60 
        delay(stepDelay);
    }

   // --- Phase 1: Lift middle-left, front-left, front-right ---
    for (int i = 0; i <= 45; i += step) {
        leftMiddleB.write(45 + i);   // 60 -> 90
        leftFrontB.write(135 - i);               // 120 -> 90
        rightFrontB.write(45 + i);  // 60 -> 90
        delay(stepDelay);
    }

    // --- Phase 2: Drop back-left, back-right, middle-right ---
    for (int i = 0; i <= 45; i += step) {
        leftBackB.write(135 - i);                // 120 -> 90
        rightBackB.write(45 + i);   // 60 -> 90
        rightMiddleB.write(45 + i); // 60 -> 90
        delay(stepDelay);
    }

    leftFrontB.write(90);
    leftMiddleB.write(90);
    leftBackB.write(90);
    rightFrontB.write(90);
    rightMiddleB.write(90);
    rightBackB.write(90);
       
}



if (GamePad.isSquarePressed()) {
    int delayTime = 300;
    int step = 2;

    // Smoothly lower front and raise back
    for (int angle = 90; angle <= 120; angle += step) {
        leftFrontB.write(angle);
        rightFrontB.write(180 - angle); // mirrored
        leftBackB.write(angle);
        rightBackB.write(180 - angle);
        delay(delayTime / ((120 - 90) / step));
    }

    // Slide hips backward smoothly
    for (int angle = 60; angle <= 90; angle += step) {
        leftFrontA.write(angle);
        rightFrontA.write(180 - angle);  // mirrored
        leftMiddleA.write(angle + 30);
        rightMiddleA.write(180 - (angle + 30));
        leftBackA.write(angle + 60);
        rightBackA.write(180 - (angle + 60));
        delay(delayTime / ((90 - 60) / step));
    }

    // Return hips to neutral
    for (int angle = 90; angle >= 60; angle -= step) {
        leftFrontA.write(angle);
        rightFrontA.write(180 - angle);
        leftMiddleA.write(angle + 30);
        rightMiddleA.write(180 - (angle + 30));
        leftBackA.write(angle + 60);
        rightBackA.write(180 - (angle + 60));
        delay(delayTime / ((90 - 60) / step));
    }

    // Reset B servos smoothly
    for (int angle = 120; angle >= 90; angle -= step) {
        leftFrontB.write(angle);
        rightFrontB.write(180 - angle);
        leftBackB.write(angle);
        rightBackB.write(180 - angle);
        delay(delayTime / ((120 - 90) / step));
    }

    // Reverse the wave â€” front up, back down
    for (int angle = 90; angle >= 60; angle -= step) {
        leftFrontB.write(angle);
        rightFrontB.write(180 - angle);
        leftBackB.write(angle);
        rightBackB.write(180 - angle);
        delay(delayTime / ((90 - 60) / step));
    }

    // Slide hips forward smoothly
    for (int angle = 60; angle >= 30; angle -= step) {
        leftFrontA.write(angle);
        rightFrontA.write(180 - angle);
        leftMiddleA.write(angle + 30);
        rightMiddleA.write(180 - (angle + 30));
        leftBackA.write(angle + 60);
        rightBackA.write(180 - (angle + 60));
        delay(delayTime / ((60 - 30) / step));
    }

    // Return hips to neutral again
    for (int angle = 30; angle <= 60; angle += step) {
        leftFrontA.write(angle);
        rightFrontA.write(180 - angle);
        leftMiddleA.write(angle + 30);
        rightMiddleA.write(180 - (angle + 30));
        leftBackA.write(angle + 60);
        rightBackA.write(180 - (angle + 60));
        delay(delayTime / ((60 - 30) / step));
    }

    // Reset B servos to neutral
    for (int angle = 60; angle <= 90; angle += step) {
        leftFrontB.write(angle);
        rightFrontB.write(180 - angle);
        leftBackB.write(angle);
        rightBackB.write(180 - angle);
        delay(delayTime / ((90 - 60) / step));
    }
}


}

//CHEATCODE FOR WHEN WRITING B SERVOS

//RIGHT BACK AND MIDDLE .write(155) = up
//LEFT BACK AND MIDDLE .write(25)  = up
//RIGHT FRONT .write(25) = up
//LEFT FRONT  .write(155) = up
